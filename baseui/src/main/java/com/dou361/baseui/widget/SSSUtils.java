package com.dou361.baseui.widget;

import android.content.Context;
import android.os.Build;
import android.support.annotation.ColorInt;
import android.support.annotation.ColorRes;
import android.support.annotation.DimenRes;
import android.text.Spannable;
import android.text.SpannableString;
import android.text.style.ForegroundColorSpan;
import android.util.Pair;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;

public class SSSUtils {

    private static Context mContext;
    private static SSSUtils mSSSUtils;
    private int mCornersRadius;
    private CharSequence mSeparator;
    private StringBuilder mSb = new StringBuilder();
    public List<Pair<CharSequence, TextPart>> mListParts = new ArrayList<>();

    private SSSUtils(Context context) {
        mContext = context;
    }

    public static SSSUtils with(Context context) {
        mSSSUtils = new SSSUtils(context);
        return mSSSUtils;
    }

    public SSSUtils setCornersRadiusRes(@DimenRes int cornersRadiusRes) {
        mCornersRadius = mContext.getResources().getDimensionPixelSize(cornersRadiusRes);
        return mSSSUtils;
    }

    public SSSUtils setCornersRadius(int cornersRadius) {
        mCornersRadius = cornersRadius;
        return mSSSUtils;
    }

    public SSSUtils setSeparator(String separator) {
        mSeparator = separator;
        return mSSSUtils;
    }

    public SSSUtils addTextPart(CharSequence textPart, @ColorInt int fgColor, @ColorInt int bgColor) {
        int startIndex = -1;
        if (mSb.length() > 0) {
            mSb.append(mSeparator);
            startIndex = mSb.length();
        } else {
            startIndex = 0;
        }
        mSb.append(textPart);
        TextPart backgroundHolder = new TextPart(textPart, fgColor, bgColor, startIndex, mSb.length());
        Pair<CharSequence, TextPart> pair = Pair.create(textPart, backgroundHolder);
        mListParts.add(pair);
        return mSSSUtils;
    }

    public SSSUtils addTextPart(CharSequence textPart, @ColorInt int fgColor) {
        return addTextPart(textPart, fgColor, -1);
    }

    public SSSUtils addTextPart(CharSequence textPart) {
        return addTextPart(textPart, -1, -1);
    }

    public SSSUtils into(TextView textView) {
        SpannableString spanText = new SpannableString(mSb);
        for (Pair<CharSequence, TextPart> stringPart : mListParts) {
            if (stringPart.second.mFgColor != -1) {
                spanText.setSpan(new ForegroundColorSpan(stringPart.second.mFgColor), stringPart.second.mStart, stringPart.second.mEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
            if (stringPart.second.mBgColor != -1) {
                spanText.setSpan(new RadiusBackgroundSpan(stringPart.second.mBgColor, mCornersRadius), stringPart.second.mStart, stringPart.second.mEnd, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
            }
        }
        if (textView != null) {
            textView.setText(spanText);
        }
        return mSSSUtils;
    }

    /**
     * Returns a color associated with a particular resource ID
     * <p>
     * Starting in {@link Build.VERSION_CODES#M}, the returned
     * color will be styled for the specified Context's theme.
     *
     * @param id The desired resource identifier, as generated by the aapt
     *           tool. This integer encodes the package, type, and resource
     *           entry. The value 0 is an invalid identifier.
     * @return A single color value in the form 0xAARRGGBB.
     * @throws android.content.res.Resources.NotFoundException if the given ID
     *                                                         does not exist.
     */
    private static int getColor(@ColorRes int id) {
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
            return mContext.getColor(id);
        } else {
            return mContext.getResources().getColor(id);
        }
    }
}
